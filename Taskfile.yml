version: "3"

tasks:
  test:
    desc: "run linters and tests"
    aliases: [t]
    cmds:
      - go vet ./...
      - staticcheck ./...

  dev-up:
    desc: "start the dev version of app locally with a Docker postgres image"
    aliases: [dev]
    cmds:
      - docker compose up -d
      - defer: docker compose stop
      # sleeping gives docker compose time to spin up the postgres container in case it doesn't exist
      - sleep 0.35
      - go run main.go

  dev-stop:
    desc: "stop dev containers without removing them"
    cmds:
      - docker compose stop

  dev-down:
    desc: "stop and remove dev containers"
    cmds:
      - docker compose down

  docker-clean:
    desc: "remove all stopped containers and clean the build cache"
    cmds:
      - docker system prune

  prod-up:
    desc: "start the containerized/prod version of app"
    aliases: [prod]
    cmds:
      # --build rebuilds the app image each time to ensure the latest src code is used
      - docker compose
        -f docker-compose.production.yml
        --env-file .env.production
        up --build

  prod-down:
    desc: "remove all containers created by prod-up"
    cmds:
      - docker compose -f docker-compose.production.yml down

  build-tailwind:
    desc: "build a minimal CSS file with only necessary tailwind classes"
    dir: tailwind
    aliases: [tailwind]
    cmds:
      - npx tailwindcss -i ./styles.css -o ../src/assets/styles.css

  connect-to-db:
    desc: "connect to the running postgres docker container in interactive mode"
    aliases: [db]
    cmds:
      - docker compose up -d
      - docker exec -it web-development-with-go-db-1 /usr/bin/psql -U baloo -d lenslocked
